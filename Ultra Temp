// I square C idk fam
// DHT Temperature & Humidity Sensor
// Unified Sensor Library Example
// Written by Tony DiCola for Adafruit Industries
// Released under an MIT license.

// REQUIRES the following Arduino libraries:
// - DHT Sensor Library: https://github.com/adafruit/DHT-sensor-library
// - Adafruit Unified Sensor Lib: https://github.com/adafruit/Adafruit_Sensor

#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>

#define DHTPIN 8     // Digital pin connected to the DHT sensor 
// Feather HUZZAH ESP8266 note: use pins 3, 4, 5, 12, 13 or 14 --
// Pin 15 can work but DHT must be disconnected during program upload.

// Uncomment the type of sensor in use:
#define DHTTYPE    DHT11     // DHT 11
//#define DHTTYPE    DHT22     // DHT 22 (AM2302)
//#define DHTTYPE    DHT21     // DHT 21 (AM2301)

// See guide for details on sensor wiring and usage:
//   https://learn.adafruit.com/dht/overview

DHT_Unified dht(DHTPIN, DHTTYPE);

uint32_t delayMS;

#include "NewPing.h"

#define TRIGGER_PIN 6
#define ECHO_PIN 9
#define MAX_DISTANCE 400

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);

#include <LiquidCrystal.h>  //adding the library code of the LCD to this code
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2; //all the pin locations fro the LCD
LiquidCrystal lcd(rs, en, d4, d5, d6, d7); //initialize the library to the pin numbers to the LCD
byte C[8] = {
  0b00010,
  0b00101,
  0b00010,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
int buttonPin = 10;
int count;
int lastbuttonstate;
int currentbuttonstate;

float duration;
float distance;
float soundsp;
float soundcm;
int iterations = 5;

void setup() {

  pinMode(buttonPin, INPUT_PULLUP);
  Serial.begin(9600);
  // Initialize device.
  dht.begin();
  Serial.println(F("DHTxx Unified Sensor Example"));
  // Print temperature sensor details.
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.println(F("Temperature Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("째C"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("째C"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("째C"));
  Serial.println(F("------------------------------------"));
  // Print humidity sensor details.
  dht.humidity().getSensor(&sensor);
  Serial.println(F("Humidity Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("%"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("%"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("%"));
  Serial.println(F("------------------------------------"));
  // Set delay between sensor readings based on sensor details.
  delayMS = sensor.min_delay / 1000;
lcd.begin(16,2); // setting the peramiters for how big the LCD screen is
lcd.createChar(0, C); //this is what will creat the ohm symbol
currentbuttonstate = digitalRead(buttonPin);
}

void loop() {
  int val = digitalRead(buttonPin);
  Serial.println(val);

  // Delay between measurements.
  //delay(delayMS);
  // Get temperature event and print its value.
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  float temperature = event.temperature;
  dht.humidity().getEvent(&event);
  float humidity = event.relative_humidity;

  if (isnan(temperature)) {
    Serial.println(F("Error reading temperature!"));
  }
  else {
    Serial.print(F("Temperature: "));
    Serial.print(temperature);
    Serial.println(F("째C"));
/*    lcd.setCursor(0,0); //is the location of where you will start, (0,0) is the first row begening of the screen
    lcd.print("T:"); //this will print the word "bit=" in the LCD screen
    lcd.print(event.temperature); //this will print the value of the potentiometer on the LCD screen
    lcd.write((byte)0); //this will print the celcius symbol on the LCD screen
    lcd.print("C ");
    float Fahrenheit = (event.temperature*9/5)+32;
    lcd.print(Fahrenheit);
    lcd.print("F");*/
  }
  // Get humidity event and print its value.
  if (isnan(event.relative_humidity)) {
    Serial.println(F("Error reading humidity!"));
  }
  else {
    Serial.print(F("Humidity: "));
    Serial.print(humidity);
    Serial.println(F("%"));
/*    lcd.setCursor(0,1); //is the location of where you will start, (0,1) is the second row begening of the screen
    lcd.print("Humidity:"); //
    lcd.print(event.relative_humidity); //
    lcd.print("%"); */
  }

  //Calculate the speed in M/s
  soundsp = 331.4 + (0.606 * temperature) + (0.0124 * humidity);
  
  // convert to cm/ms
  soundcm = soundsp / 10000;
  
  duration = sonar.ping_median(iterations);
  
  // calculate distance
  distance = duration / 2 * soundcm;

  lastbuttonstate = currentbuttonstate;
  currentbuttonstate = digitalRead(buttonPin);
  if(lastbuttonstate == 1 && currentbuttonstate == 0) {
    count = count+1;
   
  if(count > 1) {
    count = 0;
  }
  }
  Serial.println(count);
  if(count == 0 ) {
    lcd.clear();
    lcd.print(temperature); //this will print the value of the potentiometer on the LCD screen
    lcd.write((byte)0); //this will print the celcius symbol on the LCD screen
    lcd.print("C ");
    lcd.setCursor(0, 2);    
    lcd.print("Humidity:"); //this will print the word "volt=" in the LCD screen
    lcd.print(humidity); //this will print the voltage value on the LDC screen
    lcd.print("%"); 
  }    
  
  if(count == 1) {
  if (distance >= 400 || distance <= 2) {
  lcd.print("out of range");
  }
  else {
  lcd.print(distance);
  lcd.print("cm");
  delay(200);
  lcd.clear();
  } 
 }      
}
